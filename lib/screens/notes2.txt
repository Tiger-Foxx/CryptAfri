import 'package:flutter/material.dart';
import 'package:lottie/lottie.dart';

// Créer une classe CartItem qui représente un produit dans le panier
class CartItem {
  final String name; // Le nom du produit
  final double price; // Le prix du produit
  final int quantity; // La quantité du produit
  final String image; // L'image du produit

  CartItem({
    required this.name,
    required this.price,
    required this.quantity,
    required this.image,
  });
}

// Créer une liste de produits fictifs pour simuler le contenu du panier
List<CartItem> cartItems = [
  CartItem(
    name: 'Pomme',
    price: 4000,
    quantity: 3,
    image: 'assets/images/0.jpg',
  ),
  CartItem(
    name: 'Banane',
    price: 5000,
    quantity: 5,
    image: 'assets/images/0.jpg',
  ),
  CartItem(
    name: 'Orange',
    price: 0.40,
    quantity: 4,
    image: 'assets/images/0.jpg',
  ),
  CartItem(
    name: 'Orange',
    price: 0.40,
    quantity: 4,
    image: 'assets/images/0.jpg',
  ),
];

// Créer une classe CartScreen qui représente la screen du panier
class CartScreen extends StatefulWidget {
  static const routeName = 'cart';

  @override
  State<CartScreen> createState() => _CartScreenState();
}

class _CartScreenState extends State<CartScreen> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Color.fromARGB(171, 0, 0, 0),
      appBar: AppBar(
        title: Text('Mon panier'),
      ),
      body: Column(
        children: [
          // Créer un widget Expanded qui occupe tout l'espace disponible
          Expanded(
            // Créer un widget ListView qui affiche la liste des produits dans le panier
            child: cartItems.isEmpty
                ? ListView.builder(
                    itemCount:
                        cartItems.length, // Le nombre d'éléments dans la liste
                    itemBuilder: (context, index) {
                      // Obtenir le produit à l'index courant
                      CartItem item = cartItems[index];
                      // Créer un widget Dismissible qui permet de supprimer un élément en le glissant vers la gauche
                      return Dismissible(
                        key: ValueKey(item
                            .name), // Une clé unique pour identifier l'élément
                        direction: DismissDirection
                            .endToStart, // La direction du glissement
                        onDismissed: (direction) {
                          // La fonction à appeler lorsque l'élément est supprimé
                          // Supprimer l'élément de la liste
                          cartItems.removeAt(index);
                          // Afficher un message de confirmation
                          ScaffoldMessenger.of(context).showSnackBar(
                            SnackBar(
                                backgroundColor: Colors.red,
                                content: Text(
                                  '${item.name} a été supprimé du panier',
                                  style: TextStyle(
                                      fontFamily: 'Poppins',
                                      color: Colors.white),
                                )),
                          );
                        },
                        background: Container(
                          // Le widget à afficher derrière l'élément lors du glissement
                          color: Colors
                              .red, // Une couleur rouge pour indiquer la suppression
                          alignment: Alignment
                              .centerRight, // Aligner le contenu à droite
                          padding: EdgeInsets.only(
                              right: 16), // Ajouter un peu d'espace à droite
                          child: Icon(
                            Icons.delete, // Une icône de corbeille
                            color: Colors
                                .white, // Une couleur blanche pour l'icône
                          ),
                        ),
                        child: Column(
                          children: [
                            ListTile(
                              // Le widget à afficher pour l'élément de la liste
                              leading: Image.asset(
                                  item.image), // L'image du produit à gauche
                              title: Text(
                                item.name,
                                style: TextStyle(
                                    fontFamily: 'Poppins', color: Colors.white),
                              ), // Le nom du produit au centre
                              subtitle: Text(
                                '${item.price} XAF',
                                style: TextStyle(
                                    fontFamily: 'Poppins', color: Colors.amber),
                              ), // Le prix du produit en dessous du nom
                              trailing: Text(
                                '${item.quantity}',
                                style: TextStyle(
                                    fontFamily: 'Poppins', color: Colors.white),
                              ), // La quantité du produit à droite
                            ),
                            SizedBox(
                                height: 5,
                                child: Container(
                                  decoration:
                                      BoxDecoration(color: Colors.amber),
                                )),
                          ],
                        ),
                      );
                    },
                  )
                : SizedBox(
                    height: 300,
                    child: Lottie.asset('assets/lotties/cart.json')),
          ),
          SizedBox(
            height: 100,
            width: 100,
            child: Lottie.asset('assets/lotties/cart.json'),
          ),
          // Créer un widget Container qui affiche le total du panier en bas de l'écran
          Container(
            height: 80, // La hauteur du conteneur
            color: Color.fromARGB(255, 221, 166, 3), // La couleur du conteneur
            padding:
                EdgeInsets.all(16), // Ajouter un peu d'espace autour du contenu
            child: Row(
              // Créer un widget Row qui aligne les éléments horizontalement
              mainAxisAlignment: MainAxisAlignment
                  .spaceBetween, // Espacer les éléments également
              children: [
                // Créer un widget Text qui affiche le total du panier
                Text(
                  'Total : ${getTotal()} XAF', // Le texte à afficher
                  style: TextStyle(
                    // Le style du texte
                    color: Colors.white, // Une couleur blanche pour le texte
                    fontSize: 18, // Une taille de 24 pixels pour le texte
                    fontWeight:
                        FontWeight.bold, // Une graisse en gras pour le texte
                  ),
                ),
                // Créer un widget ElevatedButton qui permet de passer la commande
                ElevatedButton.icon(
                  icon: Icon(Icons.delivery_dining),
                  onPressed: () {
                    // La fonction à appeler lorsque le bouton est appuyé
                    // Afficher un message de confirmation
                    ScaffoldMessenger.of(context).showSnackBar(
                      SnackBar(
                        content: Text(
                          'Votre commande a été validée',
                          style: TextStyle(
                            // Le style du texte
                            color: Colors
                                .white, // Une couleur blanche pour le texte
                            fontSize:
                                20, // Une taille de 24 pixels pour le texte
                            fontWeight: FontWeight
                                .bold, // Une graisse en gras pour le texte
                          ),
                        ),
                        backgroundColor: Colors.green,
                      ),
                    );
                  },
                  label: Text('Acheter'), // Le texte à afficher sur le bouton
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  // Créer une fonction qui calcule le total du panier
  double getTotal() {
    // Initialiser le total à zéro
    double total = 0;
    // Parcourir la liste des produits dans le panier
    for (CartItem item in cartItems) {
      // Ajouter au total le prix du produit multiplié par sa quantité
      total += item.price * item.quantity;
    }
    // Retourner le total arrondi à deux décimales
    return double.parse(total.toStringAsFixed(2));
  }
}
