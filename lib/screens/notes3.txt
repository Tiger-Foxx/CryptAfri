
// Importer les packages nécessaires
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

// Créer une classe ProductModel qui représente un produit
class ProductModel {
  final String name; // Le nom du produit
  final double price; // Le prix du produit
  final String image; // L'image du produit
  final String ID; // L'identifiant du produit

  ProductModel({
    required this.name,
    required this.price,
    required this.image,
    required this.ID,
  });
}

// Créer une fonction qui convertit un document Firestore en un objet ProductModel
ProductModel productFromDoc(DocumentSnapshot doc) {
  return ProductModel(
    name: doc['name'],
    price: doc['price'],
    image: doc['image'],
    ID: doc.id,
  );
}

// Créer une fonction qui convertit une liste de documents Firestore en une liste de ProductModel
List<ProductModel> productsFromDocs(List<DocumentSnapshot> docs) {
  return docs.map((doc) => productFromDoc(doc)).toList();
}

// Obtenir l'email de l'utilisateur courant avec un null check
Future<String> getUserEmail() async {
  // Obtenir l'objet User avec un null check
  User user = await FirebaseAuth.instance.currentUser()!;
  // Retourner l'email de l'utilisateur
  return user.email!;
}

// Créer une classe CartScreen qui représente la screen du panier
class CartScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Mon panier'),
      ),
      body: Column(
        children: [
          // Créer un widget FutureBuilder qui attend les données de Firestore
          FutureBuilder<List<ProductModel>>(
            // Appeler la fonction getCartProducts() pour obtenir les produits du panier
            future: getCartProducts(),
            // Définir le builder qui affiche le contenu selon l'état du Future
            builder: (context, snapshot) {
              // Si le Future est en attente, afficher un widget CircularProgressIndicator
              if (snapshot.connectionState == ConnectionState.waiting) {
                return Center(
                  child: CircularProgressIndicator(),
                );
              }
              // Si le Future a terminé avec succès, afficher un widget ListView qui affiche les produits du panier
              if (snapshot.hasData) {
                // Obtenir la liste des produits du panier
                List<ProductModel> cartProducts = snapshot.data!;
                // Créer un widget ListView qui affiche les produits du panier
                return ListView.builder(
                  itemCount: cartProducts.length, // Le nombre d'éléments dans la liste
                  itemBuilder: (context, index) {
                    // Obtenir le produit à l'index courant
                    ProductModel product = cartProducts[index];
                    // Créer un widget Dismissible qui permet de supprimer un produit du panier en le glissant vers la gauche
                    return Dismissible(
                      key: ValueKey(product.ID), // Une clé unique pour identifier l'élément
                      direction:
                          DismissDirection.endToStart, // La direction du glissement
                      onDismissed:
                          (direction) {
                        // La fonction à appeler lorsque l'élément est supprimé
                        // Supprimer le document du produit dans la collection CartItems
                        deleteFromCart(product.ID);
                        // Afficher un message de confirmation
                        ScaffoldMessenger.of(context).showSnackBar(
                          SnackBar(
                            content: Text('${product.name} a été supprimé du panier'),
                          ),
                        );
                      },
                      background: Container(
                        // Le widget à afficher derrière l'élément lors du glissement
                        color: Colors.red, // Une couleur rouge pour indiquer la suppression
                        alignment:
                            Alignment.centerRight, // Aligner le contenu à droite
                        padding:
                            EdgeInsets.only(right: 16), // Ajouter un peu d'espace à droite
                        child: Icon(
                          Icons.delete, // Une icône de corbeille
                          color: Colors.white, // Une couleur blanche pour l'icône
                        ),
                      ),
                      child: ListTile(
                        // Le widget à afficher pour l'élément de la liste
                        leading: Image.network(product.image), // L'image du produit à gauche
                        title: Text(product.name), // Le nom du produit au centre
                        subtitle:
                            Text('${product.price} €'), // Le prix du produit en dessous du nom
                      ),
                    );
                  },
                );
              }
              // Si le Future a terminé avec une erreur, afficher un widget Text qui affiche l'erreur
              if (snapshot.hasError) {
                return Center(
                  child: Text('Une erreur est survenue : ${snapshot.error}'),
                );
              }
              // Par défaut, retourner un widget vide
              return SizedBox.shrink();
            },
          ),
          // Créer un widget Container qui affiche le total du panier en bas de l'écran
          Container(
            height: 80, // La hauteur du conteneur
            color: Colors.blue, // La couleur du conteneur
            padding:
                EdgeInsets.all(16), // Ajouter un peu d'espace autour du contenu
            child: Row(
              // Créer un widget Row qui aligne les éléments horizontalement
              mainAxisAlignment:
                  MainAxisAlignment.spaceBetween, // Espacer les éléments également
              children: [
                // Créer un widget Text qui affiche le total du panier
                Text(
                  'Total : ${getTotal()} €', // Le texte à afficher
                  style: TextStyle(
                    // Le style du texte
                    color: Colors.white, // Une couleur blanche pour le texte
                    fontSize: 24, // Une taille de 24 pixels pour le texte
                    fontWeight: FontWeight.bold, // Une graisse en gras pour le texte
                  ),
                ),
                // Créer un widget ElevatedButton qui permet de passer la commande
                ElevatedButton(
                  onPressed: () {
                    // La fonction à appeler lorsque le bouton est appuyé
                    // Afficher un message de confirmation
                    ScaffoldMessenger.of(context).showSnackBar(
                      SnackBar(content: Text('Votre commande a été validée')),
                    );
                  },
                  child: Text('Commander'), // Le texte à afficher sur le bouton
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  // Créer une fonction qui obtient les produits du panier de l'utilisateur courant
  Future<List<ProductModel>> getCartProducts() async {
    // Obtenir l'email de l'utilisateur courant avec un null check
    String userEmail = await getUserEmail();
    // Obtenir les documents de la collection CartItems qui correspondent à l'email de l'utilisateur
    QuerySnapshot cartSnapshot = await FirebaseFirestore.instance.collection('CartItems').where('UserEmail', isEqualTo: userEmail).get();
    // Obtenir les valeurs des attributs IDProduit des documents obtenus
    List<String> productIds = cartSnapshot.docs.map((doc) => doc['IDProduit']).toList();
    // Obtenir les documents de la collection produits qui correspondent aux IDProduit obtenus
    QuerySnapshot productSnapshot = await FirebaseFirestore.instance.collection('produits').where(FieldPath.documentId, whereIn: productIds).get();
    // Convertir les documents des produits en une liste de ProductModel et la retourner
    return productsFromDocs(productSnapshot.docs);
  }

  // Créer une fonction qui supprime un document dans la collection CartItems selon l'IDProduit passé en paramètre
  Future<void> deleteFromCart() async{}
}